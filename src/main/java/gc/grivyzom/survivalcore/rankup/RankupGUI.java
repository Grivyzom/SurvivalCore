package gc.grivyzom.survivalcore.rankup;

import gc.grivyzom.survivalcore.Main;
import gc.grivyzom.survivalcore.rankup.menu.BedrockMenuManager;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.Map;

/**
 * Interfaz gr√°fica para el sistema de rankup 2.0 - SISTEMA H√çBRIDO
 * Detecta autom√°ticamente Bedrock/Java y muestra el men√∫ apropiado
 *
 * @author Brocolitx
 * @version 3.0 - Sistema H√≠brido Bedrock/Java
 */
public class RankupGUI {

    /**
     * Abre el men√∫ principal del sistema de rangos
     * NUEVA VERSI√ìN: Detecta autom√°ticamente Bedrock vs Java
     */
    public static void openMainMenu(Player player, Main plugin) {
        if (plugin.getRankupManager() == null) {
            player.sendMessage("¬ßc‚ùå Sistema de rankup no disponible");
            return;
        }

        try {
            RankupManager rankupManager = plugin.getRankupManager();

            // üéØ NUEVO: Usar sistema h√≠brido que detecta autom√°ticamente
            if (rankupManager.isHybridMenuSystemAvailable()) {
                // Sistema h√≠brido completo disponible
                BedrockMenuManager.ClientType clientType = rankupManager.detectClientType(player);

                switch (clientType) {
                    case BEDROCK -> {
                        player.sendMessage(ChatColor.GREEN + "üì± Detectado cliente Bedrock - Abriendo men√∫ optimizado");
                        rankupManager.openMainMenuHybrid(player);
                    }
                    case JAVA -> {
                        player.sendMessage(ChatColor.GREEN + "üíª Detectado cliente Java - Abriendo men√∫ interactivo");
                        rankupManager.openMainMenuHybrid(player);
                    }
                    case UNKNOWN -> {
                        player.sendMessage(ChatColor.YELLOW + "üîç Tipo de cliente desconocido - Usando men√∫ por defecto");
                        rankupManager.openMainMenuHybrid(player);
                    }
                }
            } else if (rankupManager.isMenuSystemAvailable()) {
                // Solo men√∫s Java disponibles
                player.sendMessage(ChatColor.YELLOW + "üíª Solo men√∫s Java disponibles");
                var menuManager = rankupManager.getMenuManager();
                if (menuManager != null) {
                    menuManager.openMainMenu(player);
                } else {
                    openMainMenuLegacy(player, plugin);
                }
            } else {
                // Fallback a comandos
                openMainMenuLegacy(player, plugin);
            }

        } catch (Exception e) {
            plugin.getLogger().severe("Error abriendo men√∫ h√≠brido principal: " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Error abriendo men√∫. Contacta a un administrador.");
        }
    }

    /**
     * Abre el men√∫ de progreso detallado
     * NUEVA VERSI√ìN: Sistema h√≠brido
     */
    public static void openProgressMenu(Player player, Main plugin) {
        if (plugin.getRankupManager() == null) {
            player.sendMessage("¬ßc‚ùå Sistema de rankup no disponible");
            return;
        }

        try {
            RankupManager rankupManager = plugin.getRankupManager();

            if (rankupManager.isHybridMenuSystemAvailable()) {
                // Usar sistema h√≠brido
                rankupManager.openProgressMenuHybrid(player);
            } else if (rankupManager.isMenuSystemAvailable()) {
                // Solo Java
                var menuManager = rankupManager.getMenuManager();
                if (menuManager != null) {
                    menuManager.openProgressMenu(player);
                } else {
                    openProgressMenuLegacy(player, plugin);
                }
            } else {
                // Fallback a comandos
                openProgressMenuLegacy(player, plugin);
            }

        } catch (Exception e) {
            plugin.getLogger().severe("Error abriendo men√∫ de progreso h√≠brido: " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Error abriendo men√∫ de progreso.");
        }
    }

    /**
     * Abre la lista de todos los rangos
     * NUEVA VERSI√ìN: Sistema h√≠brido
     */
    public static void openRanksList(Player player, Main plugin) {
        if (plugin.getRankupManager() == null) {
            player.sendMessage("¬ßc‚ùå Sistema de rankup no disponible");
            return;
        }

        try {
            RankupManager rankupManager = plugin.getRankupManager();

            if (rankupManager.isHybridMenuSystemAvailable()) {
                // Para lista de rangos, usar comando ya que es m√°s efectivo para ambos tipos
                BedrockMenuManager.ClientType clientType = rankupManager.detectClientType(player);

                if (clientType == BedrockMenuManager.ClientType.BEDROCK) {
                    player.sendMessage(ChatColor.GREEN + "üì± Mostrando lista de rangos optimizada para Bedrock");
                } else {
                    player.sendMessage(ChatColor.GREEN + "üíª Mostrando lista de rangos para Java");
                }

                player.performCommand("rankup list");

            } else if (rankupManager.isMenuSystemAvailable()) {
                var menuManager = rankupManager.getMenuManager();
                if (menuManager != null) {
                    menuManager.openRanksListMenu(player);
                } else {
                    openRanksListLegacy(player, plugin);
                }
            } else {
                openRanksListLegacy(player, plugin);
            }

        } catch (Exception e) {
            plugin.getLogger().severe("Error abriendo lista de rangos h√≠brida: " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Error abriendo lista de rangos.");
        }
    }

    /**
     * Abre el men√∫ de configuraci√≥n personal
     * NUEVA VERSI√ìN: Detecta tipo de cliente
     */
    public static void openSettingsMenu(Player player, Main plugin) {
        if (plugin.getRankupManager() == null) {
            player.sendMessage("¬ßc‚ùå Sistema de rankup no disponible");
            return;
        }

        try {
            RankupManager rankupManager = plugin.getRankupManager();

            if (rankupManager.isHybridMenuSystemAvailable()) {
                BedrockMenuManager.ClientType clientType = rankupManager.detectClientType(player);

                if (clientType == BedrockMenuManager.ClientType.BEDROCK) {
                    // Para Bedrock, mostrar configuraci√≥n simplificada
                    player.sendMessage(ChatColor.YELLOW + "üì± Configuraci√≥n para Bedrock:");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ Los men√∫s se optimizan autom√°ticamente");
                    player.sendMessage(ChatColor.WHITE + "‚Ä¢ Usa comandos para configuraci√≥n avanzada");
                    player.sendMessage(ChatColor.GRAY + "Comandos: /rankup help");
                } else {
                    // Para Java, usar men√∫ completo
                    var menuManager = rankupManager.getMenuManager();
                    if (menuManager != null) {
                        menuManager.openSettingsMenu(player);
                    } else {
                        player.sendMessage("¬ße‚ö† Men√∫ de configuraci√≥n no disponible");
                    }
                }
            } else {
                var menuManager = rankupManager.getMenuManager();
                if (menuManager != null) {
                    menuManager.openSettingsMenu(player);
                } else {
                    player.sendMessage("¬ße‚ö† Men√∫ de configuraci√≥n no disponible - Usa el sistema b√°sico");
                }
            }

        } catch (Exception e) {
            plugin.getLogger().severe("Error abriendo configuraci√≥n h√≠brida: " + e.getMessage());
            player.sendMessage("¬ßc‚ùå Error abriendo configuraci√≥n.");
        }
    }

    /**
     * Detecta y muestra informaci√≥n sobre el tipo de cliente
     */
    public static void showClientInfo(Player player, Main plugin) {
        if (plugin.getRankupManager() == null) {
            player.sendMessage("¬ßc‚ùå Sistema de rankup no disponible");
            return;
        }

        try {
            RankupManager rankupManager = plugin.getRankupManager();

            if (rankupManager.isHybridMenuSystemAvailable()) {
                BedrockMenuManager.ClientType clientType = rankupManager.detectClientType(player);

                player.sendMessage(ChatColor.AQUA + "‚ïê‚ïê‚ïê INFORMACI√ìN DE CLIENTE ‚ïê‚ïê‚ïê");

                switch (clientType) {
                    case BEDROCK -> {
                        player.sendMessage(ChatColor.GREEN + "üì± Cliente: " + ChatColor.YELLOW + "Minecraft Bedrock Edition");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Men√∫s optimizados para m√≥viles y consolas");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Interfaz simplificada y t√°ctil");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Compatibilidad autom√°tica");
                    }
                    case JAVA -> {
                        player.sendMessage(ChatColor.GREEN + "üíª Cliente: " + ChatColor.YELLOW + "Minecraft Java Edition");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Men√∫s interactivos completos");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Funcionalidades avanzadas");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Configuraci√≥n personalizable");
                    }
                    case UNKNOWN -> {
                        player.sendMessage(ChatColor.GRAY + "‚ùì Cliente: " + ChatColor.YELLOW + "No detectado");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Usando configuraci√≥n por defecto");
                        player.sendMessage(ChatColor.WHITE + "‚Ä¢ Men√∫s b√°sicos disponibles");
                    }
                }

                // Mostrar capacidades disponibles
                player.sendMessage("");
                player.sendMessage(ChatColor.YELLOW + "Capacidades disponibles:");
                player.sendMessage(ChatColor.GREEN + "‚úì " + ChatColor.WHITE + "Sistema de rankup completo");
                player.sendMessage(ChatColor.GREEN + "‚úì " + ChatColor.WHITE + "Detecci√≥n autom√°tica de cliente");
                player.sendMessage(ChatColor.GREEN + "‚úì " + ChatColor.WHITE + "Men√∫s optimizados por plataforma");

            } else {
                player.sendMessage(ChatColor.YELLOW + "üíª Sistema est√°ndar Java activado");
                player.sendMessage(ChatColor.GRAY + "Para habilitar soporte Bedrock, instala BedrockGUI");
            }

        } catch (Exception e) {
            player.sendMessage("¬ßc‚ùå Error obteniendo informaci√≥n de cliente");
        }
    }

    // =================== M√âTODOS LEGACY (FALLBACK) ===================

    /**
     * M√©todo legacy del men√∫ principal
     */
    @Deprecated
    private static void openMainMenuLegacy(Player player, Main plugin) {
        player.sendMessage("¬ße‚ö† Usando men√∫ b√°sico - Configura MenuManager para men√∫s avanzados");

        player.sendMessage("¬ß7Comandos disponibles:");
        player.sendMessage("¬ße/rankup ¬ß7- Intentar rankup");
        player.sendMessage("¬ße/rankup progress ¬ß7- Ver progreso");
        player.sendMessage("¬ße/rankup list ¬ß7- Ver rangos disponibles");
        player.sendMessage("¬ße/rankup info ¬ß7- Tu informaci√≥n");
    }

    /**
     * M√©todo legacy del men√∫ de progreso
     */
    @Deprecated
    private static void openProgressMenuLegacy(Player player, Main plugin) {
        player.sendMessage("¬ße‚ö† Men√∫ de progreso no disponible - Usa ¬ße/rankup progress");
    }

    /**
     * M√©todo legacy de la lista de rangos
     */
    @Deprecated
    private static void openRanksListLegacy(Player player, Main plugin) {
        player.sendMessage("¬ße‚ö† Lista de rangos no disponible - Usa ¬ße/rankup list");
    }

    // =================== M√âTODOS DE UTILIDAD ACTUALIZADOS ===================

    /**
     * Verifica si el sistema de men√∫s h√≠brido est√° disponible
     */
    public static boolean isHybridMenuSystemAvailable(Main plugin) {
        if (plugin.getRankupManager() == null) {
            return false;
        }

        return plugin.getRankupManager().isHybridMenuSystemAvailable();
    }

    /**
     * Verifica si el sistema de men√∫s est√° disponible (cualquier tipo)
     */
    public static boolean isMenuSystemAvailable(Main plugin) {
        if (plugin.getRankupManager() == null) {
            return false;
        }

        return plugin.getRankupManager().isMenuSystemAvailable();
    }

    /**
     * Obtiene informaci√≥n sobre el estado del sistema de men√∫s h√≠brido
     */
    public static String getHybridMenuSystemStatus(Main plugin) {
        if (!plugin.isRankupSystemEnabled()) {
            return "¬ßc‚ùå Sistema de rankup deshabilitado";
        }

        RankupManager rankupManager = plugin.getRankupManager();

        if (rankupManager.isHybridMenuSystemAvailable()) {
            Map<String, Object> hybridInfo = rankupManager.getHybridSystemInfo();
            boolean bedrockAvailable = (Boolean) hybridInfo.getOrDefault("bedrockGuiDetected", false);
            boolean javaAvailable = (Boolean) hybridInfo.getOrDefault("javaMenusAvailable", false);

            if (bedrockAvailable && javaAvailable) {
                return "¬ßa‚úì Sistema h√≠brido completo (Bedrock + Java)";
            } else if (javaAvailable) {
                return "¬ße‚ö† Solo men√∫s Java disponibles";
            } else {
                return "¬ßc‚ùå Sistema de men√∫s no disponible";
            }
        } else if (rankupManager.isMenuSystemAvailable()) {
            return "¬ße‚ö† MenuManager b√°sico disponible - Solo Java";
        } else {
            return "¬ßc‚ùå Solo comandos b√°sicos disponibles";
        }
    }

    /**
     * Obtiene estad√≠sticas detalladas del sistema h√≠brido
     */
    public static Map<String, Object> getHybridSystemStats(Main plugin) {
        Map<String, Object> stats = new HashMap<>();

        if (!plugin.isRankupSystemEnabled()) {
            stats.put("status", "RANKUP_DISABLED");
            return stats;
        }

        RankupManager rankupManager = plugin.getRankupManager();

        stats.put("hybridSystemAvailable", rankupManager.isHybridMenuSystemAvailable());
        stats.put("menuSystemAvailable", rankupManager.isMenuSystemAvailable());

        if (rankupManager.isHybridMenuSystemAvailable()) {
            stats.putAll(rankupManager.getHybridSystemInfo());
        }

        return stats;
    }
}